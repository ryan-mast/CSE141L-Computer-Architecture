{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2400\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 // Add registers to break up critical paths\
\
// To only include if certain thing defined\
`ifdef BEHAVIORAL\
`endif\
`define BEHAVIORAL\
\
// use defines to make easier to read code\
`define LW 32'b100011_?????_?????_?????_?????_??????\
`define SW 32'b101011_?????_?????_?????_?????_??????\
`define ADDIU 32'b001001_?????_?????_?????_?????_??????\
`define BNE 32'b000101_?????_?????_?????_?????_??????\
\
// Next State Logic; always_ff to advance states, always_comb to compute next\
// uses typedef to simplify naming\
typedef enum \{sNewPC, sFetch, sExecute, sMemory\} state_s;\
state_s substate_r, substate_n;\
always_ff @(posedge clk)\
	substate_r <= reset_i ? sNewPC : substate_n;\
always_comb\
unique case (substate_r)\
	sNewPC: substate_n = sFetch;\
	sFetch: substate_n = sExecute;\
	sExecute:\
		unique casez (IR_r)\
			'LW: substate_n = sMemory;\
			default: substate_n = sNewPC;\
		endcase\
	sMemory: substate_n = sNewPC;\
	default: substate_n = sNewPC;\
endcase\
\
// Enables: State dependent. Only enable signals at certain times\
// combinational, just set the stuff, based on the state it is currently in, guards for read/write enable signals\
always_comb\
begin\
	pc_en = 1'b0;\
	imem_en = 1'b0;\
	IR_en = 1'b0;\
	dmem_wen = 1'b0;\
	dmem_ren = 1'b0;\
	rf_wen = 1'b0;\
unique case (substate_n)\
	sNewPC:\
	begin\
		pc_en = 1;\
		rf_wen = writes_rf_c;\
		dmem_wen = writes_dmem_c;\
	end\
	sFetch: imem_ren = 1;\
	sExecute: IR_en = 1;\
	sMemory: dmem_ren = 1;\
endcase\
end\
\
// Combinationals: Does not care about state. Stuff like setting mux selectors.\
// just sets stuff regardless of the cycle it is in\
reg rf_wr_sel; // aka WriteToReg\
always_comb\
	unique_casez (IR_r)\
		'LW: rf_wr_sel = 1'b1;\
		\'85\
		default: rf_wr_sel = 1'b0;\
	endcase\
reg writes_rf_c; // aka RegWrite\
always_comb\
	unique casez (IR_r)\
		`LW: writes_rf_c = 1'b1;\
		`SW: writes_rf_c = 1'b0;\
		`BNE: writes_rf_c = 1'b0;\
		`ADDIU: writes_rf_c = 1'b1;\
		\'85\
		default: writes_rf_c = 1'b0;\
	endcase\
}